name: Frontend CI/CD

on:
  push:
    paths:
      - 'aiagent/client/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    paths:
      - 'aiagent/client/**'
      - '.github/workflows/frontend-ci.yml'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'aiagent/client/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd aiagent/client
          npm ci
      
      - name: Lint with ESLint
        run: |
          cd aiagent/client
          npm run lint
      
      - name: Type check with TypeScript
        run: |
          cd aiagent/client
          npm run type-check
      
      - name: Run tests with coverage
        run: |
          cd aiagent/client
          npm run test:coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: aiagent/client/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
      
      - name: Build application
        env:
          VITE_API_URL: http://localhost:8001
          VITE_APP_ENV: production
        run: |
          cd aiagent/client
          npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: aiagent/client/dist

  docker-build:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./aiagent/client
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/flowise-fastapi-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/flowise-fastapi-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  accessibility-test:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'aiagent/client/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd aiagent/client
          npm ci
      
      - name: Build application
        env:
          VITE_API_URL: http://localhost:8001
          VITE_APP_ENV: test
        run: |
          cd aiagent/client
          npm run build
      
      - name: Run accessibility tests with axe-core
        run: |
          cd aiagent/client
          npm run test:a11y

  lighthouse-ci:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'aiagent/client/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd aiagent/client
          npm ci
      
      - name: Build and serve
        env:
          VITE_API_URL: http://localhost:8001
          VITE_APP_ENV: test
        run: |
          cd aiagent/client
          npm run build
          npm run preview &
          sleep 10
      
      - name: Run Lighthouse CI
        run: |
          cd aiagent/client
          npx lhci autorun 