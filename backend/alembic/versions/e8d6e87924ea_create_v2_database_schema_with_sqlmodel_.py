"""Create V2 database schema with SQLModel tables

Revision ID: e8d6e87924ea
Revises: 
Create Date: 2025-07-06 20:18:14.705163

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e8d6e87924ea'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('role', sa.Enum('ADMIN', 'USER', 'VIEWER', name='userrole'), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(length=128), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('credentials',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('service_type', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('encrypted_data', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('encryption_key_id', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_credentials_name'), 'credentials', ['name'], unique=False)
    op.create_index(op.f('ix_credentials_service_type'), 'credentials', ['service_type'], unique=False)
    op.create_index(op.f('ix_credentials_user_id'), 'credentials', ['user_id'], unique=False)
    op.create_table('custom_nodes',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('category', sa.Enum('LLM', 'TOOL', 'AGENT', 'CHAIN', 'MEMORY', 'VECTOR_STORE', 'DOCUMENT_LOADER', 'TEXT_SPLITTER', 'EMBEDDING', 'UTILITY', 'INTEGRATION', 'CUSTOM', name='nodecategory'), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('version', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('config', sa.JSON(), nullable=True),
    sa.Column('code', sa.Text(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_custom_nodes_category'), 'custom_nodes', ['category'], unique=False)
    op.create_index(op.f('ix_custom_nodes_created_at'), 'custom_nodes', ['created_at'], unique=False)
    op.create_index(op.f('ix_custom_nodes_is_public'), 'custom_nodes', ['is_public'], unique=False)
    op.create_index(op.f('ix_custom_nodes_name'), 'custom_nodes', ['name'], unique=False)
    op.create_index(op.f('ix_custom_nodes_user_id'), 'custom_nodes', ['user_id'], unique=False)
    op.create_table('workflows',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('flow_data', sa.JSON(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workflows_created_at'), 'workflows', ['created_at'], unique=False)
    op.create_index(op.f('ix_workflows_is_public'), 'workflows', ['is_public'], unique=False)
    op.create_index(op.f('ix_workflows_name'), 'workflows', ['name'], unique=False)
    op.create_index(op.f('ix_workflows_user_id'), 'workflows', ['user_id'], unique=False)
    op.create_table('executions',
    sa.Column('inputs', sa.JSON(), nullable=True),
    sa.Column('outputs', sa.JSON(), nullable=True),
    sa.Column('error', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELLED', name='executionstatus'), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('workflow_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('celery_task_id', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('execution_time', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['workflow_id'], ['workflows.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_executions_celery_task_id'), 'executions', ['celery_task_id'], unique=False)
    op.create_index(op.f('ix_executions_created_at'), 'executions', ['created_at'], unique=False)
    op.create_index(op.f('ix_executions_status'), 'executions', ['status'], unique=False)
    op.create_index(op.f('ix_executions_user_id'), 'executions', ['user_id'], unique=False)
    op.create_index(op.f('ix_executions_workflow_id'), 'executions', ['workflow_id'], unique=False)
    op.create_table('tasks',
    sa.Column('task_type', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'STARTED', 'PROGRESS', 'SUCCESS', 'FAILURE', 'RETRY', 'REVOKED', name='taskstatus'), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('progress', sa.Integer(), nullable=False),
    sa.Column('current_step', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('inputs', sa.JSON(), nullable=True),
    sa.Column('result', sa.JSON(), nullable=True),
    sa.Column('error', sa.Text(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('max_retries', sa.Integer(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('celery_task_id', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('workflow_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('estimated_duration', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['workflow_id'], ['workflows.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tasks_celery_task_id'), 'tasks', ['celery_task_id'], unique=True)
    op.create_index(op.f('ix_tasks_created_at'), 'tasks', ['created_at'], unique=False)
    op.create_index(op.f('ix_tasks_status'), 'tasks', ['status'], unique=False)
    op.create_index(op.f('ix_tasks_task_type'), 'tasks', ['task_type'], unique=False)
    op.create_index(op.f('ix_tasks_user_id'), 'tasks', ['user_id'], unique=False)
    op.create_index(op.f('ix_tasks_workflow_id'), 'tasks', ['workflow_id'], unique=False)
    op.create_table('task_logs',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('task_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('level', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('message', sa.Text(), nullable=True),
    sa.Column('details', sa.JSON(), nullable=True),
    sa.Column('node_id', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('step_number', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_task_logs_created_at'), 'task_logs', ['created_at'], unique=False)
    op.create_index(op.f('ix_task_logs_level'), 'task_logs', ['level'], unique=False)
    op.create_index(op.f('ix_task_logs_task_id'), 'task_logs', ['task_id'], unique=False)
    op.drop_index(op.f('group_id_index'), table_name='upsertion_records')
    op.drop_index(op.f('key_index'), table_name='upsertion_records')
    op.drop_index(op.f('namespace_index'), table_name='upsertion_records')
    op.drop_index(op.f('updated_at_index'), table_name='upsertion_records')
    op.drop_table('upsertion_records')
    op.drop_index(op.f('ix_flow_states_thread_id'), table_name='flow_states')
    op.drop_table('flow_states')
    op.drop_table('connection_test')
    op.drop_table('n8n_chat_histories')
    op.drop_index(op.f('idx_documents_embedding'), table_name='documents', postgresql_with={'lists': '100'}, postgresql_using='ivfflat')
    op.drop_index(op.f('idx_documents_metadata'), table_name='documents', postgresql_using='gin')
    op.drop_table('documents')
    op.drop_table('nods_page_section')
    op.drop_table('nods_page')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('nods_page_section',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('page_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('token_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('embedding', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('slug', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('heading', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['page_id'], ['nods_page.id'], name=op.f('nods_page_section_page_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('nods_page_section_pkey'))
    )
    op.create_table('nods_page',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('parent_page_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('path', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('checksum', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('source', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_page_id'], ['nods_page.id'], name=op.f('nods_page_parent_page_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('nods_page_pkey')),
    sa.UniqueConstraint('path', name=op.f('nods_page_path_key'))
    )
    op.create_table('documents',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('embedding', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('pageContent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('documents_pkey'))
    )
    op.create_index(op.f('idx_documents_metadata'), 'documents', ['metadata'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_documents_embedding'), 'documents', ['embedding'], unique=False, postgresql_with={'lists': '100'}, postgresql_using='ivfflat')
    op.create_table('n8n_chat_histories',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('session_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('message', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('n8n_chat_histories_pkey'))
    )
    op.create_table('connection_test',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('test_timestamp', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('connection_test_pkey'))
    )
    op.create_table('flow_states',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('thread_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('checkpoint_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('parent_checkpoint_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('checkpoint_data', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('metadata', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('flow_states_pkey'))
    )
    op.create_index(op.f('ix_flow_states_thread_id'), 'flow_states', ['thread_id'], unique=False)
    op.create_table('upsertion_records',
    sa.Column('uuid', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('namespace', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('updated_at', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('group_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('uuid', name=op.f('upsertion_records_pkey')),
    sa.UniqueConstraint('key', 'namespace', name=op.f('upsertion_records_key_namespace_key'))
    )
    op.create_index(op.f('updated_at_index'), 'upsertion_records', ['updated_at'], unique=False)
    op.create_index(op.f('namespace_index'), 'upsertion_records', ['namespace'], unique=False)
    op.create_index(op.f('key_index'), 'upsertion_records', ['key'], unique=False)
    op.create_index(op.f('group_id_index'), 'upsertion_records', ['group_id'], unique=False)
    op.drop_index(op.f('ix_task_logs_task_id'), table_name='task_logs')
    op.drop_index(op.f('ix_task_logs_level'), table_name='task_logs')
    op.drop_index(op.f('ix_task_logs_created_at'), table_name='task_logs')
    op.drop_table('task_logs')
    op.drop_index(op.f('ix_tasks_workflow_id'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_user_id'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_task_type'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_status'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_created_at'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_celery_task_id'), table_name='tasks')
    op.drop_table('tasks')
    op.drop_index(op.f('ix_executions_workflow_id'), table_name='executions')
    op.drop_index(op.f('ix_executions_user_id'), table_name='executions')
    op.drop_index(op.f('ix_executions_status'), table_name='executions')
    op.drop_index(op.f('ix_executions_created_at'), table_name='executions')
    op.drop_index(op.f('ix_executions_celery_task_id'), table_name='executions')
    op.drop_table('executions')
    op.drop_index(op.f('ix_workflows_user_id'), table_name='workflows')
    op.drop_index(op.f('ix_workflows_name'), table_name='workflows')
    op.drop_index(op.f('ix_workflows_is_public'), table_name='workflows')
    op.drop_index(op.f('ix_workflows_created_at'), table_name='workflows')
    op.drop_table('workflows')
    op.drop_index(op.f('ix_custom_nodes_user_id'), table_name='custom_nodes')
    op.drop_index(op.f('ix_custom_nodes_name'), table_name='custom_nodes')
    op.drop_index(op.f('ix_custom_nodes_is_public'), table_name='custom_nodes')
    op.drop_index(op.f('ix_custom_nodes_created_at'), table_name='custom_nodes')
    op.drop_index(op.f('ix_custom_nodes_category'), table_name='custom_nodes')
    op.drop_table('custom_nodes')
    op.drop_index(op.f('ix_credentials_user_id'), table_name='credentials')
    op.drop_index(op.f('ix_credentials_service_type'), table_name='credentials')
    op.drop_index(op.f('ix_credentials_name'), table_name='credentials')
    op.drop_table('credentials')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
